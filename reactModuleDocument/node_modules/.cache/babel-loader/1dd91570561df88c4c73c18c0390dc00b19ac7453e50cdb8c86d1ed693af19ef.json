{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\react\\\\DocumentExtractionReact\\\\reactModuleDocument\\\\src\\\\context\\\\SubmitState.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport SubmitContext from './SubmitContext';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SubmitState(props) {\n  _s();\n  const [constData, setConstData] = useState(\"Hello from const\");\n  const handleSubmitContext = async e => {\n    console.log(\"Context function\");\n    //Convert it into base64\n    let base64String = '';\n    try {\n      base64String = await getBase64(selectedFile);\n      console.log('Base64 String:', base64String);\n      const contentAfterSplit = base64String.split(\",\")[1];\n      content = contentAfterSplit;\n    } catch (error) {\n      console.log('Error converting file to base64:', error);\n    }\n\n    //data for readiness to post\n    const dataForReadiness = {\n      vendorNo: genInfo.vendorNo,\n      orderNumber: genInfo.orderNumber,\n      fileName: selectedFile.name,\n      size: selectedFile.size,\n      status: \"pending\",\n      // mediaType: selectedFile.type\n      mediaType: \"image/png\"\n    };\n\n    //Callling post function data readiness\n    try {\n      console.log(\"content :\", content);\n      const postData = await postAttachmentReadiness(dataForReadiness);\n      console.log(\"postData\", postData);\n      id = postData.ID;\n      // const updateData = await updateAttachment(content,id);\n      // console.log(\"Updated Data : \" , updateData);\n      const response = await fetch(`https://6724d9b4trial-dev-docexchange-srv.cfapps.us10-001.hana.ondemand.com/odata/v4/my/Files(${id})/content`, {\n        method: \"PUT\",\n        // or PUT, depending on API specs\n        headers: {\n          \"Content-Type\": \"application/json\" // Fixed casing\n        },\n        body: JSON.stringify({\n          content: content,\n          mediaType: \"image/png\" // Include any other required fields\n        })\n      });\n      console.log(\"kd\", response);\n    } catch (error) {\n      console.error('Error:');\n    }\n    console.log({\n      \"email\": approverMail,\n      \"name\": approverName\n    });\n    if (selectedFile) {\n      const newFile = {\n        id: id,\n        name: selectedFile.name,\n        uploadedBy: approverName || 'privileged',\n        uploadDate: new Date().toLocaleString(),\n        status: 'PENDING',\n        approverMail: approverMail || 'None'\n      };\n      setUploadedFiles([...uploadedFiles, newFile]);\n      setSelectedFile(null);\n      setIsModalOpen(false); // Close modal on submit\n      setApproverMail(approverMail);\n      setApproverName(approverName);\n      setFileInputKey(Date.now()); // Reset the file input key\n    }\n    ;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(SubmitContext.Provider, {\n      value: {\n        handleSubmitContext,\n        constData,\n        setConstData\n      },\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_s(SubmitState, \"LV/mTtU/xx71mIZL0zHqwgnL4iE=\");\n_c = SubmitState;\nexport default SubmitState;\nvar _c;\n$RefreshReg$(_c, \"SubmitState\");","map":{"version":3,"names":["React","useState","SubmitContext","jsxDEV","_jsxDEV","Fragment","_Fragment","SubmitState","props","_s","constData","setConstData","handleSubmitContext","e","console","log","base64String","getBase64","selectedFile","contentAfterSplit","split","content","error","dataForReadiness","vendorNo","genInfo","orderNumber","fileName","name","size","status","mediaType","postData","postAttachmentReadiness","id","ID","response","fetch","method","headers","body","JSON","stringify","approverMail","approverName","newFile","uploadedBy","uploadDate","Date","toLocaleString","setUploadedFiles","uploadedFiles","setSelectedFile","setIsModalOpen","setApproverMail","setApproverName","setFileInputKey","now","children","Provider","value","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/react/DocumentExtractionReact/reactModuleDocument/src/context/SubmitState.jsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport SubmitContext from './SubmitContext'\r\n\r\nfunction SubmitState(props) {\r\n    const[constData,setConstData] = useState(\"Hello from const\");\r\n    const handleSubmitContext = async (e)=>\r\n     {\r\n            console.log(\"Context function\")\r\n            //Convert it into base64\r\n            let base64String = '';\r\n            try {\r\n              base64String = await getBase64(selectedFile);\r\n              console.log('Base64 String:', base64String);\r\n              const contentAfterSplit = base64String.split(\",\")[1];\r\n              content = contentAfterSplit\r\n            } catch (error) {\r\n              console.log('Error converting file to base64:', error);\r\n            }\r\n      \r\n      \r\n            //data for readiness to post\r\n            const dataForReadiness = {\r\n              vendorNo: genInfo.vendorNo,\r\n              orderNumber: genInfo.orderNumber,\r\n              fileName: selectedFile.name,\r\n              size: selectedFile.size,\r\n              status: \"pending\",\r\n              // mediaType: selectedFile.type\r\n              mediaType: \"image/png\"\r\n            }\r\n      \r\n      \r\n            //Callling post function data readiness\r\n            try {\r\n              console.log(\"content :\",content);\r\n              const postData = await postAttachmentReadiness(dataForReadiness);\r\n              console.log(\"postData\",postData);\r\n              id = postData.ID;\r\n                // const updateData = await updateAttachment(content,id);\r\n                // console.log(\"Updated Data : \" , updateData);\r\n                const response = await fetch(\r\n                  `https://6724d9b4trial-dev-docexchange-srv.cfapps.us10-001.hana.ondemand.com/odata/v4/my/Files(${id})/content`,\r\n                  {\r\n                    method: \"PUT\", // or PUT, depending on API specs\r\n                    headers: {\r\n                      \"Content-Type\": \"application/json\", // Fixed casing\r\n                    },\r\n                    body: JSON.stringify({\r\n                      content: content,\r\n                      mediaType: \"image/png\", // Include any other required fields\r\n                    }),\r\n                  }\r\n                );\r\n                console.log(\"kd\" , response);\r\n            } catch (error) {\r\n              console.error('Error:');\r\n            }  \r\n      \r\n          console.log({ \"email\": approverMail, \"name\": approverName });\r\n          if (selectedFile) {\r\n            const newFile = {\r\n              id: id,\r\n              name: selectedFile.name,\r\n              uploadedBy: approverName || 'privileged',\r\n              uploadDate: new Date().toLocaleString(),\r\n              status: 'PENDING',\r\n              approverMail : approverMail || 'None'\r\n            };\r\n            setUploadedFiles([...uploadedFiles, newFile]);\r\n            setSelectedFile(null);\r\n            setIsModalOpen(false); // Close modal on submit\r\n            setApproverMail(approverMail);\r\n            setApproverName(approverName);\r\n            setFileInputKey(Date.now()); // Reset the file input key\r\n      \r\n          \r\n            \r\n      \r\n          };\r\n    };\r\n  return (\r\n    <>\r\n    <SubmitContext.Provider value={{handleSubmitContext , constData , setConstData}}>\r\n        {props.children}\r\n    </SubmitContext.Provider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SubmitState\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}