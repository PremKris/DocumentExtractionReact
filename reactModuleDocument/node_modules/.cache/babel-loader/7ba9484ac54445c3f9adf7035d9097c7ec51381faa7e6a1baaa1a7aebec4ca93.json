{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\react\\\\DocumentExtractionReact\\\\reactModuleDocument\\\\src\\\\context\\\\SubmitState.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport SubmitContext from \"./SubmitContext\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SubmitState(props) {\n  _s();\n  const [constData, setConstData] = useState(\"Hello from const\");\n  const getBase64 = file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => {\n        resolve(reader.result); // Resolve with base64 string when done\n      };\n      reader.onerror = error => {\n        reject(error); // Reject the promise if there's an error\n      };\n    });\n  };\n  const handleSubmitContext = async (e, {\n    genInfo,\n    selectedFile,\n    content,\n    postAttachmentReadiness,\n    id,\n    approverMail,\n    approverName,\n    uploadedFiles,\n    setUploadedFiles,\n    setSelectedFile,\n    setIsModalOpen,\n    setApproverMail,\n    setApproverName,\n    setFileInputKey\n  }) => {\n    console.log(\"Context function\");\n    //Convert it into base64\n    let base64String = \"\";\n    try {\n      base64String = await getBase64(selectedFile);\n      console.log(\"Base64 String:\", base64String);\n      const contentAfterSplit = base64String.split(\",\")[1];\n      content = contentAfterSplit;\n    } catch (error) {\n      console.log(\"Error converting file to base64:\", error);\n    }\n\n    //data for readiness to post\n    const dataForReadiness = {\n      vendorNo: genInfo.vendorNo,\n      orderNumber: genInfo.orderNumber,\n      fileName: selectedFile.name,\n      size: selectedFile.size,\n      status: \"pending\",\n      // mediaType: selectedFile.type\n      mediaType: \"image/png\"\n    };\n\n    //Callling post function data readiness\n    try {\n      console.log(\"content :\", content);\n      const postData = await postAttachmentReadiness(dataForReadiness);\n      console.log(\"postData\", postData);\n      id = postData.ID;\n      // const updateData = await updateAttachment(content,id);\n      // console.log(\"Updated Data : \" , updateData);\n      const response = await fetch(`https://6724d9b4trial-dev-docexchange-srv.cfapps.us10-001.hana.ondemand.com/odata/v4/my/Files(${id})/content`, {\n        method: \"PUT\",\n        // or PUT, depending on API specs\n        headers: {\n          \"Content-Type\": \"application/json\" // Fixed casing\n        },\n        body: JSON.stringify({\n          content: content,\n          mediaType: \"image/png\" // Include any other required fields\n        })\n      });\n      console.log(\"kd\", response);\n    } catch (error) {\n      console.error(\"Error:\");\n    }\n    console.log({\n      email: approverMail,\n      name: approverName\n    });\n    if (selectedFile) {\n      const newFile = {\n        id: id,\n        name: selectedFile.name,\n        uploadedBy: approverName || \"privileged\",\n        uploadDate: new Date().toLocaleString(),\n        status: \"PENDING\",\n        approverMail: approverMail || \"None\"\n      };\n      setUploadedFiles([...uploadedFiles, newFile]);\n      setSelectedFile(null);\n      setIsModalOpen(false); // Close modal on submit\n      setApproverMail(approverMail);\n      setApproverName(approverName);\n      setFileInputKey(Date.now()); // Reset the file input key\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(SubmitContext.Provider, {\n      value: {\n        handleSubmitContext,\n        constData,\n        setConstData\n      },\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(SubmitState, \"Psr+Y0234f45v9IRESoXHU/wrIM=\");\n_c = SubmitState;\nexport default SubmitState;\nvar _c;\n$RefreshReg$(_c, \"SubmitState\");","map":{"version":3,"names":["React","useState","SubmitContext","jsxDEV","_jsxDEV","Fragment","_Fragment","SubmitState","props","_s","constData","setConstData","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","handleSubmitContext","e","genInfo","selectedFile","content","postAttachmentReadiness","id","approverMail","approverName","uploadedFiles","setUploadedFiles","setSelectedFile","setIsModalOpen","setApproverMail","setApproverName","setFileInputKey","console","log","base64String","contentAfterSplit","split","dataForReadiness","vendorNo","orderNumber","fileName","name","size","status","mediaType","postData","ID","response","fetch","method","headers","body","JSON","stringify","email","newFile","uploadedBy","uploadDate","Date","toLocaleString","now","children","Provider","value","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/react/DocumentExtractionReact/reactModuleDocument/src/context/SubmitState.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport SubmitContext from \"./SubmitContext\";\r\n\r\nfunction SubmitState(props) {\r\n  const [constData, setConstData] = useState(\"Hello from const\");\r\n  const getBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n\r\n      reader.onload = () => {\r\n        resolve(reader.result); // Resolve with base64 string when done\r\n      };\r\n\r\n      reader.onerror = (error) => {\r\n        reject(error); // Reject the promise if there's an error\r\n      };\r\n    });\r\n  };\r\n  const handleSubmitContext = async (\r\n    e,\r\n    {\r\n      genInfo,\r\n      selectedFile,\r\n      content,\r\n      postAttachmentReadiness,\r\n      id,\r\n      approverMail,\r\n      approverName,\r\n      uploadedFiles,\r\n      setUploadedFiles,\r\n      setSelectedFile,\r\n      setIsModalOpen,\r\n      setApproverMail,\r\n      setApproverName,\r\n      setFileInputKey,\r\n    }\r\n  ) => {\r\n    console.log(\"Context function\");\r\n    //Convert it into base64\r\n    let base64String = \"\";\r\n    try {\r\n      base64String = await getBase64(selectedFile);\r\n      console.log(\"Base64 String:\", base64String);\r\n      const contentAfterSplit = base64String.split(\",\")[1];\r\n      content = contentAfterSplit;\r\n    } catch (error) {\r\n      console.log(\"Error converting file to base64:\", error);\r\n    }\r\n\r\n    //data for readiness to post\r\n    const dataForReadiness = {\r\n      vendorNo: genInfo.vendorNo,\r\n      orderNumber: genInfo.orderNumber,\r\n      fileName: selectedFile.name,\r\n      size: selectedFile.size,\r\n      status: \"pending\",\r\n      // mediaType: selectedFile.type\r\n      mediaType: \"image/png\",\r\n    };\r\n\r\n    //Callling post function data readiness\r\n    try {\r\n      console.log(\"content :\", content);\r\n      const postData = await postAttachmentReadiness(dataForReadiness);\r\n      console.log(\"postData\", postData);\r\n      id = postData.ID;\r\n      // const updateData = await updateAttachment(content,id);\r\n      // console.log(\"Updated Data : \" , updateData);\r\n      const response = await fetch(\r\n        `https://6724d9b4trial-dev-docexchange-srv.cfapps.us10-001.hana.ondemand.com/odata/v4/my/Files(${id})/content`,\r\n        {\r\n          method: \"PUT\", // or PUT, depending on API specs\r\n          headers: {\r\n            \"Content-Type\": \"application/json\", // Fixed casing\r\n          },\r\n          body: JSON.stringify({\r\n            content: content,\r\n            mediaType: \"image/png\", // Include any other required fields\r\n          }),\r\n        }\r\n      );\r\n      console.log(\"kd\", response);\r\n    } catch (error) {\r\n      console.error(\"Error:\");\r\n    }\r\n\r\n    console.log({ email: approverMail, name: approverName });\r\n    if (selectedFile) {\r\n      const newFile = {\r\n        id: id,\r\n        name: selectedFile.name,\r\n        uploadedBy: approverName || \"privileged\",\r\n        uploadDate: new Date().toLocaleString(),\r\n        status: \"PENDING\",\r\n        approverMail: approverMail || \"None\",\r\n      };\r\n      setUploadedFiles([...uploadedFiles, newFile]);\r\n      setSelectedFile(null);\r\n      setIsModalOpen(false); // Close modal on submit\r\n      setApproverMail(approverMail);\r\n      setApproverName(approverName);\r\n      setFileInputKey(Date.now()); // Reset the file input key\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <SubmitContext.Provider\r\n        value={{ handleSubmitContext, constData, setConstData }}\r\n      >\r\n        {props.children}\r\n      </SubmitContext.Provider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SubmitState;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}